{"version":3,"sources":["webpack://netlify-cms-media-library-uploadcare/webpack/universalModuleDefinition","webpack://netlify-cms-media-library-uploadcare/webpack/bootstrap","webpack://netlify-cms-media-library-uploadcare/external \"netlify-cms-lib-util\"","webpack://netlify-cms-media-library-uploadcare/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","defaultConfig","previewStep","getFiles","cdnBase","arr","Array","isArray","toJS","files","basePatternString","length","from","val","idx","RegExp","every","exp","some","url","test","isFileGroup","groupId","exec","Promise","resolve","uploadcare","loadFileGroup","done","group","getFileGroup","map","getFile","groupPattern","uploaded","filter","v","baseUrl","startsWith","fileFrom","openDialog","config","handleInsert","promise","then","cdnUrl","count","multiple","urls","uploadcareMediaLibrary","init","async","options","_options$config","publicKey","globalConfig","_objectWithoutProperties","baseConfig","_objectSpread","UPLOADCARE_LIVE","UPLOADCARE_MANUAL_START","UPLOADCARE_PUBLIC_KEY","netlify_cms_lib_util__WEBPACK_IMPORTED_MODULE_0__","registerTab","uploadcareTabEffects","show","instanceConfig","imagesOnly","state","result","enableStandalone","__webpack_exports__"],"mappings":"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","file":"dist/netlify-cms-media-library-uploadcare.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"netlify-cms-lib-util\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"netlify-cms-media-library-uploadcare\", [\"netlify-cms-lib-util\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"netlify-cms-media-library-uploadcare\"] = factory(require(\"netlify-cms-lib-util\"));\n\telse\n\t\troot[\"netlify-cms-media-library-uploadcare\"] = factory(root[\"netlify-cms-lib-util\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { loadScript } from 'netlify-cms-lib-util';\n\n/**\n * Default Uploadcare widget configuration, can be overriden via config.yml.\n */\nconst defaultConfig = {\n  previewStep: true,\n};\n\n/**\n * Determine whether an array of urls represents an unaltered set of Uploadcare\n * group urls. If they've been changed or any are missing, a new group will need\n * to be created to represent the current values.\n */\nfunction isFileGroup(files) {\n  const basePatternString = `~${files.length}/nth/`;\n  const mapExpression = (val, idx) => new RegExp(`${basePatternString}${idx}/$`);\n  const expressions = Array.from({ length: files.length }, mapExpression);\n  return expressions.every(exp => files.some(url => exp.test(url)));\n}\n\n/**\n * Returns a fileGroupInfo object wrapped in a promise-like object.\n */\nfunction getFileGroup(files) {\n  /**\n   * Capture the group id from the first file in the files array.\n   */\n  const groupId = new RegExp(`^.+/([^/]+~${files.length})/nth/`).exec(files[0])[1];\n\n  /**\n   * The `openDialog` method handles the jQuery promise object returned by\n   * `fileFrom`, but requires the promise returned by `loadFileGroup` to provide\n   * the result of it's `done` method.\n   */\n  return new Promise(resolve =>\n    window.uploadcare.loadFileGroup(groupId).done(group => resolve(group)),\n  );\n}\n\n/**\n * Convert a url or array/List of urls to Uploadcare file objects wrapped in\n * promises, or Uploadcare groups when possible. Output is wrapped in a promise\n * because the value we're returning may be a promise that we created.\n */\nfunction getFiles(value, cdnBase) {\n  if (typeof value === 'object') {\n    const arr = Array.isArray(value) ? value : value.toJS();\n    return isFileGroup(arr) ? getFileGroup(arr) : arr.map(val => getFile(val, cdnBase));\n  }\n  return value && typeof value === 'string' ? getFile(value, cdnBase) : null;\n}\n\n/**\n * Convert a single url to an Uploadcare file object wrapped in a promise-like\n * object. Group urls that get passed here were not a part of a complete and\n * untouched group, so they'll be uploaded as new images (only way to do it).\n */\nfunction getFile(url, cdnBase) {\n  const groupPattern = /~\\d+\\/nth\\/\\d+\\//;\n  const baseUrls = ['https://ucarecdn.com', cdnBase].filter(v => v);\n  const uploaded = baseUrls.some(baseUrl => url.startsWith(baseUrl) && !groupPattern.test(url));\n  return window.uploadcare.fileFrom(uploaded ? 'uploaded' : 'url', url);\n}\n\n/**\n * Open the standalone dialog. A single instance is created and destroyed for\n * each use.\n */\nfunction openDialog(files, config, handleInsert) {\n  window.uploadcare.openDialog(files, config).done(({ promise }) =>\n    promise().then(({ cdnUrl, count }) => {\n      if (config.multiple) {\n        const urls = Array.from({ length: count }, (val, idx) => `${cdnUrl}nth/${idx}/`);\n        handleInsert(urls);\n      } else {\n        handleInsert(cdnUrl);\n      }\n    }),\n  );\n}\n\n/**\n * Initialization function will only run once, returns an API object for Netlify\n * CMS to call methods on.\n */\nasync function init({ options = { config: {} }, handleInsert }) {\n  const { publicKey, ...globalConfig } = options.config;\n  const baseConfig = { ...defaultConfig, ...globalConfig };\n\n  window.UPLOADCARE_LIVE = false;\n  window.UPLOADCARE_MANUAL_START = true;\n  window.UPLOADCARE_PUBLIC_KEY = publicKey;\n\n  /**\n   * Loading scripts via url because the uploadcare widget includes\n   * non-strict-mode code that's incompatible with our build system\n   */\n  await loadScript('https://unpkg.com/uploadcare-widget@^3.6.0/uploadcare.full.js');\n  await loadScript(\n    'https://unpkg.com/uploadcare-widget-tab-effects@^1.2.1/dist/uploadcare.tab-effects.js',\n  );\n\n  /**\n   * Register the effects tab by default because the effects tab is awesome. Can\n   * be disabled via config.\n   */\n  window.uploadcare.registerTab('preview', window.uploadcareTabEffects);\n\n  return {\n    /**\n     * On show, create a new widget, cache it in the widgets object, and open.\n     * No hide method is provided because the widget doesn't provide it.\n     */\n    show: ({ value, config: instanceConfig = {}, imagesOnly }) => {\n      const config = { ...baseConfig, imagesOnly, ...instanceConfig };\n      const files = getFiles(value);\n\n      /**\n       * Resolve the promise only if it's ours. Only the jQuery promise objects\n       * from the Uploadcare library will have a `state` method.\n       */\n      if (files && !files.state) {\n        files.then(result => openDialog(result, config, handleInsert));\n      } else {\n        openDialog(files, config, handleInsert);\n      }\n    },\n\n    /**\n     * Uploadcare doesn't provide a \"media library\" widget for viewing and\n     * selecting existing files, so we return `false` here so Netlify CMS only\n     * opens the Uploadcare widget when called from an editor control. This\n     * results in the \"Media\" button in the global nav being hidden.\n     */\n    enableStandalone: () => false,\n  };\n}\n\n/**\n * The object that will be registered only needs a (default) name and `init`\n * method. The `init` method returns the API object.\n */\nconst uploadcareMediaLibrary = { name: 'uploadcare', init };\n\nexport default uploadcareMediaLibrary;\n"],"sourceRoot":""}